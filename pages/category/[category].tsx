import React from "react";
import Head from "next/head";
import Tabs from "../../components/Tabs";
import { GetServerSideProps, NextPage } from "next";
import { AxiosResponse } from "axios";
import {
  IArticle,
  Icategory,
  ICollectionResponse,
  Ipagination,
  IQueryOptions,
} from "../../types";
import { getArticles, getCategories } from "../../http";
import qs from "qs";
import ArticleList from "../../components/ArticleList";
import { debounceFunction, formatTitle } from "../../utils";
import PaginationComp from "../../components/PaginationComp";
import { useRouter } from "next/router";

interface IPropTypes {
  categories: {
    items: Icategory[];
    pagination: Ipagination;
  };
  articles: {
    items: IArticle[];
    pagination: Ipagination;
  };
  slug: string;
}

const Category: NextPage<IPropTypes> = ({ categories, articles, slug }) => {
  const router =useRouter();
  
  const {category : categoryS}=router.query;
  const handleOnSearch=(query:string)=>{
    router.push(`/category/${categoryS}/?search=${query}`)
  }
  
  
  const formattedCategory = (slug: string) => {
    return formatTitle(slug);
  };
  let titleText=`Blog using Next.js ${formattedCategory(slug)}`

  return (
    <>
      <Head>
        <title>{titleText}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Tabs category={categories.items}  handleOnSearch={debounceFunction(handleOnSearch)}/>
      <ArticleList articles={articles.items} />
      <PaginationComp
        page={articles.pagination.page}
        pageCount={articles.pagination.pageCount}
        redirectUrl={`/category/${categoryS}`}
      />
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {

  const options :IQueryOptions = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    filters: {
      category: {
        Slug: query.category,
      },
    },
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1,
    },
  };


  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search,
      },
    };
  }

  const queryString = qs.stringify(options);

 

  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await getArticles(queryString);

  const { data: categories }: AxiosResponse<ICollectionResponse<Icategory[]>> =
    await getCategories();

  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
      slug: query.category,
    },
  };
};

export default Category;
